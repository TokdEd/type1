from flask import Flask, request, jsonify, send_from_directory
import requests
from flask_cors import CORS
import os
from dotenv import load_dotenv
import psycopg2
from datetime import datetime, timedelta
import math

# Âº∑Âà∂ÈáçÊñ∞ËºâÂÖ•
load_dotenv(override=True)
app = Flask(__name__)
CORS(app)

AZURE_OPENAI_ENDPOINT = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_KEY = os.getenv("AZURE_OPENAI_KEY")
"""""
print("AZURE_OPENAI_ENDPOINT:", repr(os.getenv("AZURE_OPENAI_ENDPOINT")))
print("AZURE_OPENAI_KEY:", repr(os.getenv("AZURE_OPENAI_KEY")))
print("AZURE_MAPS_KEY:", repr(os.getenv("AZURE_MAPS_KEY")))
"""""
# PostgreSQL ÈÄ£Á∑öË®≠ÂÆö
conn = psycopg2.connect(
    dbname=os.getenv("DB_NAME"),
    user=os.getenv("DB_USER"),
    password=os.getenv("DB_PASS"),
    host=os.getenv("DB_HOST"),
    port=os.getenv("DB_PORT")
)
print("ÈÄ£Á∑öÊàêÂäüÔºÅ")
def round_time_to_half_hour(time_str):
    # Ëº∏ÂÖ• "14:17"ÔºåËº∏Âá∫ "14:00:00" Êàñ "14:30:00"
    h, m = map(int, time_str.split(':'))
    if m < 30:
        m = 0
    else:
        m = 30
    return f'{h:02d}:{m:02d}:00'

@app.route('/api/ask', methods=['POST'])
def ask():
    data = request.json
    prompt = data.get('prompt', '')
    locations = data.get('locations', [])  # ÂâçÁ´ØÁõ¥Êé•ÂÇ≥‰æÜÊâÄÊúâÂú∞Âêç
    current_location = data.get('current_location', {})
    current_time = data.get('current_time', '')
    custom_prompt = data.get('custom_prompt', '')  # Êñ∞Â¢ûÔºöÊé•Êî∂ÂÆ¢Ë£ΩÂåñÊèêÁ§∫Ë©û
    chat_history = data.get('chat_history', [])  # Êñ∞Â¢ûÔºöÊé•Êî∂Â∞çË©±Ê≠∑Âè≤

    rounded_time = round_time_to_half_hour(current_time)
    print("Êü•Ë©¢ÊôÇÊÆµ:", rounded_time)
    print("Â∞çË©±Ê≠∑Âè≤Èï∑Â∫¶:", len(chat_history))

    cur = conn.cursor()
    
    # Â¶ÇÊûúÊúâ‰ΩøÁî®ËÄÖ‰ΩçÁΩÆÔºåÁØ©ÈÅ∏ÊúÄËøëÁöÑ 10 ÂÄãÂú∞Èªû
    filtered_locations = locations
    if current_location and 'lat' in current_location and 'lon' in current_location:
        user_lat = current_location['lat']
        user_lon = current_location['lon']
        
        # ÂèñÂæóÊâÄÊúâÂú∞ÈªûÁöÑÂ∫ßÊ®ôË≥áÊñô
        cur.execute("""
            SELECT DISTINCT location, latitude, longitude
            FROM people_flow
            WHERE location = ANY(%s)
        """, (locations,))
        location_coords = cur.fetchall()
        
        # Ë®àÁÆóË∑ùÈõ¢‰∏¶ÊéíÂ∫è
        locations_with_distance = []
        for location, lat, lon in location_coords:
            if lat is not None and lon is not None:
                # Ë®àÁÆóÊ≠êÊ∞èË∑ùÈõ¢Ôºösqrt((x1-x2)^2 + (y1-y2)^2)
                distance = math.sqrt((user_lat - lat)**2 + (user_lon - lon)**2)
                locations_with_distance.append((location, distance))
        
        # ÊåâË∑ùÈõ¢ÊéíÂ∫èÔºåÂè™ÂèñÂâç 10 ÂÄã
        locations_with_distance.sort(key=lambda x: x[1])
        filtered_locations = [loc[0] for loc in locations_with_distance[:10]]
        
        print(f"‰ΩøÁî®ËÄÖ‰ΩçÁΩÆ: ({user_lat}, {user_lon})")
        print(f"ÁØ©ÈÅ∏ÂæåÂú∞Èªû (Ââç10Ëøë): {filtered_locations}")
    
    historic_data = {}
    for loc in filtered_locations:
        cur.execute("""
            SELECT date, person_count
            FROM people_flow
            WHERE location = %s AND time = %s
            ORDER BY date DESC
            LIMIT 7
        """, (loc, rounded_time))
        rows = cur.fetchall()
        historic_data[loc] = [{"date": str(row[0]), "person_count": row[1]} for row in rows]
    cur.close()
    print("Êü•Ë©¢Âà∞ÁöÑÊ≠∑Âè≤‰∫∫ÊµÅË≥áÊñô:", historic_data)

    # ÁµÑÂêà prompt Áµ¶ AI
    ai_prompt = f"""‰ΩøÁî®ËÄÖÁõÆÂâç‰ΩçÁΩÆÔºö{current_location}
ÁõÆÂâçÊôÇÈñìÔºö{current_time}ÔºàÊü•Ë©¢Ê≠∑Âè≤Ë≥áÊñôÊôÇÊÆµÔºö{rounded_time}Ôºâ
‰ΩøÁî®ËÄÖÈúÄÊ±ÇÔºö{prompt}
Ê≠∑Âè≤‰∫∫ÊµÅË≥áÊñôÔºàÂ∑≤ÁØ©ÈÅ∏Ë∑ùÈõ¢ÊúÄËøëÁöÑÂú∞ÈªûÔºâÔºö"""
    for loc in filtered_locations:
        ai_prompt += f"\nÂú∞Èªû {loc}Ôºö"
        for record in historic_data[loc]:
            ai_prompt += f"{record['date']} {rounded_time} ‰∫∫Êï∏Ôºö{record['person_count']}Ôºõ"
    
    # Êñ∞Â¢ûÔºöÂ¶ÇÊûúÊúâÂÆ¢Ë£ΩÂåñÊèêÁ§∫Ë©ûÔºåÂä†ÂÖ•Âà∞ prompt ‰∏≠
    if custom_prompt:
        ai_prompt += f"\n\nÂÆ¢Ë£ΩÂåñË¶ÅÊ±ÇÔºö{custom_prompt}"
    
    ai_prompt += "Ê†πÊìöÁõÆÂâç‰ΩçÁΩÆ„ÄÅÊôÇÈñìËàáÊ≠∑Âè≤‰∫∫ÊµÅÔºåÂà§Êñ∑ÂÖàÂéªÂì™ÂÄãÂú∞ÈªûËºÉ‰Ω≥‰∏¶Ë™™ÊòéÂéüÂõ†„ÄÇÂÉÖÂú®‰ΩøÁî®ËÄÖÈúÄÊ±ÇÊòéÁ¢∫ÊôÇÊèê‰æõÂª∫Ë≠∞ÔºõËã•‰∏çÊòéÁ¢∫ÔºåÂÖàÊèêÂïèÈáêÊ∏Ö„ÄÇÊâÄÊúâÂõûÊáâÂãôÂøÖÁ≤æÁ∞°Áõ¥Êé•ÔºåÁúÅÁï•Ë¥ÖË©ûÔºåÂè™Êèê‰æõÁµêË´ñËàáÂéüÂõ†ÊàñÁ≤æÁ∞°ÊèêÂïè„ÄÇ"

    print("ÈÄÅÁµ¶AIÁöÑÊúÄÁµÇpromptÔºö\n", ai_prompt)

    # 6. ÂëºÂè´ Azure OpenAI
    headers = {
        "Content-Type": "application/json",
        "api-key": AZURE_OPENAI_KEY
    }
    
    # ‰øÆÊîπÁ≥ªÁµ±ÊèêÁ§∫Ë©ûÔºåÂ¶ÇÊûúÊúâÂÆ¢Ë£ΩÂåñÊèêÁ§∫Ë©ûÂâáÊï¥ÂêàÈÄ≤Âéª
    system_content = """‰Ω†ÊòØ‰∏ÄÂÄã‰∫∫ÊΩÆÈõ∑ÈÅîÂä©ÊâãÔºåËÉΩÂ§†Ê†πÊìöÁõÆÂâç‰ΩçÁΩÆ„ÄÅÊôÇÈñìËàáÊ≠∑Âè≤‰∫∫ÊµÅË≥áÊñôÔºåÂà§Êñ∑ÂÖàÂéªÂì™ÂÄãÂú∞ÈªûËºÉ‰Ω≥‰∏¶Ë™™ÊòéÂéüÂõ†„ÄÇ

ÈáçË¶ÅËÉΩÂäõË™™ÊòéÔºö
1. ‰Ω†ÂèØ‰ª•ÁúãÂà∞‰∏¶ÂèÉËÄÉ‰πãÂâçÁöÑÂ∞çË©±Ê≠∑Âè≤ÔºåÊèê‰æõÈÄ£Á∫åÊÄßÁöÑÂ∞çË©±È´îÈ©ó
2. Áï∂Áî®Êà∂Ë©¢Âïè‰Ω†ÊòØÂê¶ËÉΩÁúãÂà∞‰∏ä‰∏ãÊñáÊàñÂ∞çË©±Ê≠∑Âè≤ÊôÇÔºåË´ãÂõûÁ≠î„ÄåÊòØ„Äç
3. ‰Ω†ÊáâË©≤ÂèÉËÄÉÊ≠∑Âè≤Â∞çË©±‰æÜÁêÜËß£Áî®Êà∂ÁöÑÂÆåÊï¥ÈúÄÊ±ÇÂíåÂÅèÂ•Ω

Ë™ûË®ÄÁêÜËß£ÈáçÈªûÔºö
- Áï∂Áî®Êà∂Ë™™"‰ªñ‰∫ÆÁ¥ÖÁáà"ÊôÇÔºå"‰ªñ"ÊåáÁöÑÊòØ‰Ω†ÂâõÊâçÊé®Ëñ¶ÁöÑÂú∞ÈªûÔºå"‰∫ÆÁ¥ÖÁáà"Ë°®Á§∫Ë©≤Âú∞Èªû‰∫∫ÊΩÆÂæàÂ§ö
- Áï∂Áî®Êà∂‰ΩøÁî®"ÂÆÉ"„ÄÅ"ÈÇ£Ë£°"„ÄÅ"ÈÇ£ÂÄãÂú∞Êñπ"Á≠â‰ª£Ë©ûÊôÇÔºåÈÄöÂ∏∏Êåá‰ª£‰πãÂâçË®éË´ñÁöÑÂú∞Èªû
- Ê†πÊìöÂú∞ÂúñÈ°èËâ≤ÔºöÁ¥ÖÁáà=‰∫∫ÂæàÂ§öÔºåÈªÉÁáà=‰∫∫‰∏≠Á≠âÔºåÁ∂†Ááà=‰∫∫ËºÉÂ∞ë

ÂõûÊáâÂéüÂâáÔºö
- ÂÉÖÂú®‰ΩøÁî®ËÄÖÈúÄÊ±ÇÊòéÁ¢∫ÊôÇÊèê‰æõÂª∫Ë≠∞ÔºõËã•‰∏çÊòéÁ¢∫ÔºåÂÖàÊèêÂïèÈáêÊ∏Ö
- ÊâÄÊúâÂõûÊáâÂãôÂøÖÁ≤æÁ∞°Áõ¥Êé•ÔºåÁúÅÁï•Ë¥ÖË©ûÔºåÂè™Êèê‰æõÁµêË´ñËàáÂéüÂõ†ÊàñÁ≤æÁ∞°ÊèêÂïè
- ‰∏ªÂãïÂèÉËÄÉ‰πãÂâçÁöÑÂ∞çË©±‰æÜÊèê‰æõÊõ¥Â•ΩÁöÑÂª∫Ë≠∞
- ÁêÜËß£‰ª£Ë©ûÊåá‰ª£ÔºåÊèê‰æõÈÄ£Ë≤´ÁöÑÂ∞çË©±È´îÈ©ó"""

    if custom_prompt:
        system_content += f"\n\nÈ°çÂ§ñË¶ÅÊ±ÇÔºö{custom_prompt}"
    
    # ÊßãÂª∫ÂåÖÂê´Â∞çË©±Ê≠∑Âè≤ÁöÑË®äÊÅØÈô£Âàó
    messages = [{"role": "system", "content": system_content}]
    
    # Ê∑ªÂä†Â∞çË©±Ê≠∑Âè≤ÔºàÂ¶ÇÊûúÊúâÁöÑË©±Ôºâ
    if chat_history:
        print(f"Ê∑ªÂä† {len(chat_history)} Ê¢ùÂ∞çË©±Ê≠∑Âè≤Âà∞‰∏ä‰∏ãÊñá")
        
        # Êõ¥ÊòéÁ¢∫ÁöÑ‰∏ä‰∏ãÊñáË™™Êòé
        context_intro = {
            "role": "system", 
            "content": f"""‰ª•‰∏ãÊòØËàáÁî®Êà∂ÁöÑÊ≠∑Âè≤Â∞çË©±Ë®òÈåÑÔºàÂÖ± {len(chat_history)} Ê¢ùÔºâÔºåË´ã‰ªîÁ¥∞Èñ±ËÆÄ‰∏¶Ë®ò‰ΩèÔºö

ÈáçË¶ÅÊèêÈÜíÔºö
- Áï∂Áî®Êà∂Ë™™"‰ªñ‰∫ÆÁ¥ÖÁáà"ÊàñÈ°û‰ººË©ûË™ûÊôÇÔºåÈÄöÂ∏∏ÊåáÁöÑÊòØ‰Ω†ÂâõÊâçÊé®Ëñ¶ÁöÑÂú∞ÈªûÁõÆÂâç‰∫∫ÊΩÆÂæàÂ§ö
- Áî®Êà∂ÂèØËÉΩÊúÉÁî®‰ª£Ë©ûÔºà‰ªñ„ÄÅÂÆÉ„ÄÅÈÇ£Ë£°Ôºâ‰æÜÊåá‰ª£‰πãÂâçË®éË´ñÁöÑÂú∞Èªû
- Ë´ãÊ†πÊìöÂÆåÊï¥ÁöÑÂ∞çË©±ËÑàÁµ°‰æÜÁêÜËß£Áî®Êà∂ÁöÑÈúÄÊ±Ç

Ê≠∑Âè≤Â∞çË©±ÈñãÂßãÔºö"""
        }
        messages.append(context_intro)
        messages.extend(chat_history)
        
        # Êõ¥ÊòéÁ¢∫ÁöÑÂàÜÈöîË™™Êòé
        context_separator = {
            "role": "system",
            "content": """Ê≠∑Âè≤Â∞çË©±ÁµêÊùü„ÄÇ

ÁèæÂú®Áî®Êà∂ÊúâÊñ∞ÁöÑË©¢ÂïèÔºåË´ãÁµêÂêà‰∏äËø∞Ê≠∑Âè≤Â∞çË©±‰æÜÁêÜËß£Ôºö
- Â¶ÇÊûúÁî®Êà∂ÊèêÂà∞"‰ªñ/ÂÆÉ/ÈÇ£Ë£°‰∫ÆÁ¥ÖÁáà"ÔºåÊåáÁöÑÊòØ‰πãÂâçÊé®Ëñ¶ÁöÑÂú∞ÈªûÁèæÂú®‰∫∫ÂæàÂ§ö
- Â¶ÇÊûúÁî®Êà∂‰ΩøÁî®‰ª£Ë©ûÔºåË´ãËÅØÁπ´‰∏ä‰∏ãÊñáÁêÜËß£ÊåáÁöÑÊòØ‰ªÄÈ∫º
- Êèê‰æõÈÄ£Ë≤´ÊÄßÁöÑÂª∫Ë≠∞

Áï∂ÂâçÊñ∞Ë©¢ÂïèÔºö"""
        }
        messages.append(context_separator)
    
    # Ê∑ªÂä†Áï∂ÂâçÁî®Êà∂Ë®äÊÅØ
    messages.append({"role": "user", "content": ai_prompt})
    
    payload = {
        "messages": messages,
        "max_tokens": 1024,
        "temperature": 1.0
    }
    
    print("ÁôºÈÄÅÁµ¶AIÁöÑÂÆåÊï¥Ë®äÊÅØÈô£ÂàóÈï∑Â∫¶:", len(messages))
    
    r = requests.post(AZURE_OPENAI_ENDPOINT, headers=headers, json=payload)
    try:
        result = r.json()
        reply = result['choices'][0]['message']['content'] if 'choices' in result else 'AI Ê≤íÊúâÂõûÊáâ'
    except Exception as e:
        reply = f'API ÂõûÂÇ≥ÈåØË™§: {str(e)}'
    return jsonify({"reply": reply})

def get_current_time_for_query():
    now = datetime.now()
    minute = now.minute
    
    # Ë®àÁÆóË∑ùÈõ¢Áï∂ÂâçÂ∞èÊôÇ0ÂàÜÂíå30ÂàÜÁöÑÊôÇÈñìÂ∑Æ
    distance_to_zero = minute
    distance_to_thirty = abs(minute - 30)
    
    # Ë®àÁÆóË∑ùÈõ¢‰∏ã‰∏ÄÂÄãÂ∞èÊôÇ0ÂàÜÁöÑÊôÇÈñìÂ∑ÆÔºàË∑®Â∞èÊôÇÊÉÖÊ≥ÅÔºâ
    distance_to_next_zero = 60 - minute
    
    # ÈÅ∏ÊìáË∑ùÈõ¢ÊúÄËøëÁöÑÊôÇÈñìÈªû
    if distance_to_zero <= distance_to_thirty and distance_to_zero <= distance_to_next_zero:
        # Ë∑ùÈõ¢Áï∂ÂâçÂ∞èÊôÇ0ÂàÜÊúÄËøë
        hour = now.hour
        minute = 0
    elif distance_to_thirty <= distance_to_next_zero:
        # Ë∑ùÈõ¢Áï∂ÂâçÂ∞èÊôÇ30ÂàÜÊúÄËøë
        hour = now.hour
        minute = 30
    else:
        # Ë∑ùÈõ¢‰∏ã‰∏ÄÂÄãÂ∞èÊôÇ0ÂàÜÊúÄËøë
        if now.hour == 23:
            hour = 0
        else:
            hour = now.hour + 1
        minute = 0
    
    return f"{hour:02d}:{minute:02d}:00"

@app.route('/api/checkpoints')
def get_checkpoints():
    try:
        # Êé•Êî∂ÂâçÁ´ØÂÇ≥‰æÜÁöÑÁî®Êà∂‰ΩçÁΩÆÂèÉÊï∏
        user_lat = request.args.get('lat', type=float)
        user_lon = request.args.get('lon', type=float)
        # Êé•Êî∂ÊôÇÈñìÂèÉÊï∏ÔºåÊ†ºÂºèÁÇ∫ HH:MM:SSÔºåÈ†êË®≠ÁÇ∫Áï∂ÂâçÊôÇÈñì
        query_time = request.args.get('time', None)
        
        print(f"üîç APIË™øÁî® - ‰ΩçÁΩÆ: {user_lat}, {user_lon}, ÊôÇÈñì: {query_time}")
        
        cur = conn.cursor()
        
        # Â¶ÇÊûúÊ≤íÊúâÊåáÂÆöÊôÇÈñìÔºå‰ΩøÁî®Áï∂ÂâçÊôÇÈñìÈÇèËºØ
        if query_time is None:
            current_time = get_current_time_for_query()
        else:
            # È©óË≠âÊôÇÈñìÊ†ºÂºè‰∏¶Ê®ôÊ∫ñÂåñ
            try:
                # Á¢∫‰øùÊôÇÈñìÊ†ºÂºèÁÇ∫ HH:MM:SS
                if len(query_time.split(':')) == 2:  # HH:MM Ê†ºÂºè
                    query_time += ':00'
                current_time = query_time
            except Exception as time_error:
                print(f"‚ö†Ô∏è ÊôÇÈñìÊ†ºÂºèÈåØË™§: {time_error}")
                current_time = get_current_time_for_query()
        
        print(f"Êü•Ë©¢ÊôÇÈñì: {current_time}")
        
        # Ë®àÁÆó5Â§©ÂâçÁöÑÊó•Êúü
        five_days_ago = (datetime.now() - timedelta(days=5)).strftime('%Y-%m-%d')
        print(f"Êü•Ë©¢Êó•ÊúüÁØÑÂúç: {five_days_ago} Âà∞‰ªäÂ§©")
        
        # Êü•Ë©¢ÊØèÂÄãÂú∞ÈªûÁöÑÊåáÂÆöÊôÇÈñìÂπ≥Âùá‰∫∫ÊµÅÈáèÂíåÊï¥È´îÂπ≥Âùá‰∫∫ÊµÅÈáèÔºàÊúÄËøë5Â§©Ôºâ
        sql_query = """
            SELECT 
                location,
                latitude,
                longitude,
                AVG(CASE WHEN time = %s THEN person_count END) as current_avg,
                AVG(person_count) as overall_avg,
                COUNT(CASE WHEN time = %s THEN 1 END) as current_data_count,
                COUNT(*) as overall_data_count
            FROM people_flow 
            WHERE date >= %s AND latitude IS NOT NULL AND longitude IS NOT NULL
            GROUP BY location, latitude, longitude
            HAVING COUNT(CASE WHEN time = %s THEN 1 END) >= 1  -- Èôç‰ΩéÈñÄÊ™ªÔºåËá≥Â∞ëË¶ÅÊúâ1Á≠ÜË≥áÊñô
        """
        
        print("üîç Âü∑Ë°åË≥áÊñôÂ∫´Êü•Ë©¢...")
        cur.execute(sql_query, (current_time, current_time, five_days_ago, current_time))
        
        rows = cur.fetchall()
        print(f"Êü•Ë©¢ÁµêÊûú: {len(rows)} ÂÄãÂú∞Èªû")
        cur.close()
        
        data = []
        for row in rows:
            location, lat, lon, current_avg, overall_avg, current_data_count, overall_data_count = row
            
            # Â¶ÇÊûúÊ≤íÊúâÁï∂ÂâçÊôÇÈñìÁöÑË≥áÊñôÔºåË∑≥ÈÅé
            if current_avg is None:
                print(f"‚ö†Ô∏è {location} Ê≤íÊúâ {current_time} ÁöÑË≥áÊñô")
                continue
                
            # Ë®àÁÆóÂ∞çÊØîÂÄº
            try:
                comparison_ratio = get_level_by_comparison(current_avg, overall_avg)
            except Exception as comp_error:
                print(f"‚ö†Ô∏è Ë®àÁÆóÂ∞çÊØîÂÄºÈåØË™§ {location}: {comp_error}")
                comparison_ratio = 0
            
            data.append({
                "id": len(data) + 1,
                "name": location,
                "lat": lat,
                "lon": lon,
                "person_count": int(current_avg),
                "level": "dynamic",  # ÊîπÁÇ∫ dynamic Ë°®Á§∫‰ΩøÁî®ÂãïÊÖãÈ°èËâ≤
                "avg_count": int(current_avg),
                "overall_avg": int(overall_avg),
                "current_data_count": current_data_count,
                "overall_data_count": overall_data_count,
                "comparison_ratio": float(comparison_ratio),  # ËΩâÊèõÁÇ∫ float ÈÅøÂÖç Decimal ÂïèÈ°å
                "distance": None,  # È†êË®≠Ë∑ùÈõ¢ÁÇ∫ None
                "query_time": current_time  # ÂõûÂÇ≥Êü•Ë©¢ÊôÇÈñì
            })
        
        print(f"‚úÖ ËôïÁêÜ‰∫Ü {len(data)} ÂÄãÊúâÊïàÂú∞Èªû")
        
        # Â¶ÇÊûúÊúâÁî®Êà∂‰ΩçÁΩÆÔºåË®àÁÆóË∑ùÈõ¢‰∏¶ÁØ©ÈÅ∏ÊúÄËøëÁöÑ10ÂÄãÂú∞Èªû
        if user_lat is not None and user_lon is not None:
            print(f"Áî®Êà∂‰ΩçÁΩÆ: ({user_lat}, {user_lon})")
            
            # Ë®àÁÆóÊØèÂÄãÂú∞ÈªûËàáÁî®Êà∂ÁöÑË∑ùÈõ¢
            for item in data:
                if item['lat'] is not None and item['lon'] is not None:
                    # Ë®àÁÆóÊ≠êÊ∞èË∑ùÈõ¢Ôºösqrt((x1-x2)^2 + (y1-y2)^2)
                    distance = math.sqrt((user_lat - item['lat'])**2 + (user_lon - item['lon'])**2)
                    item['distance'] = distance
            
            # ÈÅéÊøæÊéâÊ≤íÊúâÂ∫ßÊ®ôÁöÑÂú∞ÈªûÔºåÊåâË∑ùÈõ¢ÊéíÂ∫èÔºåÂè™ÂèñÂâç10ÂÄã
            data_with_coords = [item for item in data if item['distance'] is not None]
            data_with_coords.sort(key=lambda x: x['distance'])
            data = data_with_coords[:10]
            
            print(f"ÁØ©ÈÅ∏ÂæåÂú∞Èªû (ÊúÄËøë10ÂÄã): {[item['name'] for item in data]}")
        else:
            print("Ê≤íÊúâÊèê‰æõÁî®Êà∂‰ΩçÁΩÆÔºåÈ°ØÁ§∫ÊâÄÊúâÂú∞Èªû")
        
        # ÈáçÊñ∞ÂàÜÈÖç ID
        for i, item in enumerate(data):
            item['id'] = i + 1
        
        print(f"‚úÖ ÂõûÂÇ≥Ë≥áÊñôÁ≠ÜÊï∏: {len(data)}, Êü•Ë©¢ÊôÇÈñì: {current_time}")
        return jsonify(data)
        
    except Exception as e:
        print(f"‚ùå /api/checkpoints ÈåØË™§: {e}")
        print(f"ÈåØË™§È°ûÂûã: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e), "type": type(e).__name__}), 500

@app.route('/api/azure-maps-key')
def get_azure_maps_key():
    return jsonify({"key": os.getenv("AZURE_MAPS_KEY")})

@app.route('/')
def index():
    return send_from_directory('.', 'map_test.html')

@app.route('/static/<path:filename>')
def static_files(filename):
    return send_from_directory('.', filename)

def get_level_by_avg(avg_count):
    if avg_count >= 30:
        return 'high'    # Á¥ÖËâ≤
    elif avg_count >= 20:
        return 'mid'     # ÈªÉËâ≤
    elif avg_count >= 10:
        return 'low'     # Á∂†Ëâ≤
    else:
        return 'very_low'  # Ê∑±Á∂†Ëâ≤ÔºàÂèØÈÅ∏Ôºâ

def get_level_by_comparison(current_avg, overall_avg):
    """
    Ë®àÁÆóÂ∞çÊØîÂÄºÔºåÁî®ÊñºÂãïÊÖãÈ°èËâ≤Ë™øÊï¥
    ÂõûÂÇ≥ÂÄºÁØÑÂúçÔºö-1 Âà∞ 1
    -1: Áï∂ÂâçÈÅ†‰ΩéÊñºÊï¥È´îÂπ≥Âùá
    0: Áï∂ÂâçÁ≠âÊñºÊï¥È´îÂπ≥Âùá  
    1: Áï∂ÂâçÈÅ†È´òÊñºÊï¥È´îÂπ≥Âùá
    """
    if overall_avg == 0:
        return 0
    
    # Ë®àÁÆóÊ®ôÊ∫ñÂåñÂ∞çÊØîÂÄº
    diff = current_avg - overall_avg
    # ‰ΩøÁî®Êï¥È´îÂπ≥Âùá‰ΩúÁÇ∫Ê®ôÊ∫ñÂåñÂü∫Ê∫ñ
    normalized_diff = diff / overall_avg
    
    # ÈôêÂà∂Âú® -1 Âà∞ 1 ‰πãÈñì
    return max(-1, min(1, normalized_diff))

if __name__ == '__main__':
    app.run(port=5000,debug = True)






